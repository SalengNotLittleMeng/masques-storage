{"version":3,"file":"masquesStorage.js","sources":["../src/util.js","../src/base.js","../src/session/index.js","../src/local/setTimeout.js","../src/local/index.js","../src/cache/index.js","../src/main.js"],"sourcesContent":["export function getStorageOptions(value){\n    if(typeof value =='string'){\n        try{\n            return JSON.parse(value)\n        }catch(e){void 0}\n    }\n    return value\n}","import {getStorageOptions} from './util'\nexport default class BaseStorage{\n    constructor(options={}){\n        this.storageHandler=this.creatStorageHandler(options)\n    }\n    creatStorageHandler(options){\n        return options.handler\n    }\n    get(key,isRow=false){\n        if(isRow){\n            return this.storageHandler.get(key)\n        }\n        const optionsInfo=getStorageOptions(this.storageHandler.get(key))\n        if(this.handlerGetMethods){\n            return this.handlerGetMethods(optionsInfo,key)\n        }\n        return optionsInfo&&optionsInfo.value\n    }\n    set(storageObject,options={}){\n        Object.keys(storageObject).forEach(key=>{\n            if(options.isRow){\n                this.storageHandler.set(key,JSON.stringify(storageObject[key]))\n                return\n            }\n            const decorativeObject=Object.create({})\n            decorativeObject.value=storageObject[key]\n            if(this.handlerSetMethods){\n                this.handlerSetMethods(decorativeObject,options)\n        }\n            this.storageHandler.set(key,JSON.stringify(decorativeObject))\n        })\n    }\n    delete(key){\n        this.storageHandler.delete(key)\n    }\n    has(key){\n        return this.storageHandler.has(key)\n    }\n    clear(){\n        this.storageHandler.clear()\n    }\n}","import BaseStorage from '../base'\nexport default class Session extends BaseStorage{\n    constructor(){\n        super()\n    }\n    creatStorageHandler(){\n        return {\n            get(key){\n                return sessionStorage.getItem(key)\n            },\n            set(key,value){\n                sessionStorage.setItem(key,value)\n            },\n            delete(key){\n                sessionStorage.removeItem(key)\n            },\n            has(key){\n                return sessionStorage.has(key)\n            },\n            clear(){\n                sessionStorage.clear()\n            }\n        }\n    }\n}","export function setTimeoutForSetter(decorativeObject,options){\n        if(!options.timeout){\n            decorativeObject.timeout=-1  \n        }else{\n            decorativeObject.timeout=new Date().getTime()+(options.timeout || 0)\n        }\n}\nexport function checkTimeoutForGetter(decorativeObject){\n    const {timeout}=decorativeObject\n    return timeout==-1?false:new Date().getTime()>timeout\n}","import BaseStorage from '../base'\nimport {checkTimeoutForGetter, setTimeoutForSetter} from './setTimeout'\nexport default class Local extends BaseStorage{\n    constructor(){\n        super()\n    }\n    creatStorageHandler(){\n        return {\n            get(key){\n                return localStorage.getItem(key)\n            },\n            set(key,value){\n                localStorage.setItem(key,value)\n            },\n            delete(key){\n                localStorage.removeItem(key)\n            },\n            has(key){\n                return localStorage.has(key)\n            },\n            clear(){\n                localStorage.clear()\n            }\n        }\n    }\n    handlerSetMethods(decorativeObject,options){\n        setTimeoutForSetter(decorativeObject,options)\n    }\n    handlerGetMethods(decorativeObject,key){\n        const value=decorativeObject.value\n        if(checkTimeoutForGetter(decorativeObject)){\n            this.storageHandler.delete(key)\n        }\n        return value\n    }\n}","export default class Cache {\n    constructor(options) {\n        this.options = options\n        this.cacheName = this.options.cacheName || '__masque_cache__'\n        this.cacheList = []\n        this.MapCache = null\n        this.initCache()\n        this.flush = true\n        this.bufferIndex = 0\n        this.timer = null\n    }\n    // 初始化方法，读取本地存储中的缓存并初始化Map对象\n    initCache() {\n        const initList=this.options.init()\n        if (!initList) {\n            this.cacheList = []\n            this.MapCache = new Map()\n            return\n        }\n        this.cacheList =initList\n        this.MapCache = new Map(this.cacheList.map(item => {\n            return [item.key, item.value]\n        }))\n    }\n    //添加缓存，并将最新添加的放在队列首部\n    add(key, value) {\n        // 如果数据量过大（超过100条）可以认为是中间查找的过程，无需缓存\n        try {\n            const cacheValue = this.getCacheObject(key, value)\n            this.cacheList.unshift(cacheValue)\n            this.MapCache.set(key, value)\n            this.bufferIndex++\n            this.eventBuffer()\n        } catch (e) { }\n\n    }\n    //通过定时器减少写入内存的次数,这里通过两种策略，一是设置缓冲区大小，超过大小则检查内存占用；二是通过定时器事件，保证最后总会执行写入或处理内存\n    eventBuffer() {\n        //如果缓冲区大于5，执行写入操作\n        if (this.bufferIndex > this.options.buffer) {\n            this.checkMemery()\n            this.bufferIndex = 0\n            return\n        }\n        if(!this.options.needSetTimeout){\n            return\n        }\n        //如果开启了定时器则重制\n        if (this.timer) {\n            clearTimeout(this.timer)\n        }\n        this.timer = setTimeout(() => {\n            this.bufferIndex = 0\n            this.checkMemery()\n        }, 3000)\n    }\n    //查找缓存，如果找到的话更新缓存队列，实现lru算法\n    find(key) {\n        try {\n            const result = this.MapCache.get(key)\n            if (!result) { return false }\n            this.cacheList.splice(this.cacheList.findIndex(item => item.city == city), 1)\n            this.cacheList.unshift(this.getCacheObject(key, result))\n            return result\n        } catch (e) {\n            return false\n        }\n    }\n    //创建缓存对象\n    getCacheObject(key, value) {\n        return {\n            key,value\n        }\n    }\n    //对数据进行缓存\n    cacheStorage() {\n        this.options.cacheStorage(this.cacheList)\n    }\n    //清理缓存，当数据条过大时触发清理机制，清除一般的缓存\n    clearCache() {\n        let endIndex = Math.floor(this.cacheList.length / 3) * 2\n        while (endIndex) {\n            this.MapCache.delete(this.cacheList.pop().city)\n            endIndex--\n        }\n    }\n    //检查缓存，如果缓存数据过多则触发清理机制\n    checkMemery() {\n        if (this.cacheList.length > this.options.size) {\n            this.clearCache()\n        } else {\n            this.cacheStorage()\n        }\n    }\n}\n\n// const cache = new CityCache({\n//     cacheName: '__citylist_cache__',\n//     size: 40,\n//     buffer: 5\n// })\n","import Session from './session/index'\nimport Local from './local/index'\nimport Cache from './cache/index'\nexport default function useMasquesStorage(type,options){\n    switch(type){\n        case 'session':{\n            return new Session(options)\n        }\n        case 'local':\n            return new Local(options)\n        case 'cache':\n            return new Cache(options)\n        default:\n            return new Local(options)\n    }\n}"],"names":["getStorageOptions","value","BaseStorage","options","key","isRow","optionsInfo","storageObject","decorativeObject","Session","setTimeoutForSetter","checkTimeoutForGetter","timeout","Local","Cache","initList","item","cacheValue","result","endIndex","useMasquesStorage","type"],"mappings":"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"}